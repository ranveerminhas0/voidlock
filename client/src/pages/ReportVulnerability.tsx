import { useEffect, useState } from 'react';
import GeometricBackground from '@/components/GeometricBackground';
import Footer from '@/components/Footer';
import { ShieldAlert, ChevronLeft, AlertTriangle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Link } from 'wouter';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';

const vulnerabilitySchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  severity: z.enum(['low', 'medium', 'high', 'critical'], {
    required_error: 'Please select a severity level',
  }),
  title: z.string().min(5, 'Title must be at least 5 characters'),
  description: z.string().min(20, 'Description must be at least 20 characters'),
  stepsToReproduce: z.string().min(10, 'Please provide steps to reproduce'),
  impact: z.string().min(10, 'Please describe the potential impact'),
});

type VulnerabilityFormData = z.infer<typeof vulnerabilitySchema>;

export default function ReportVulnerability() {
  const [submitted, setSubmitted] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const form = useForm<VulnerabilityFormData>({
    resolver: zodResolver(vulnerabilitySchema),
    defaultValues: {
      name: '',
      email: '',
      severity: undefined,
      title: '',
      description: '',
      stepsToReproduce: '',
      impact: '',
    },
  });

  const onSubmit = async (data: VulnerabilityFormData) => {
    try {
      const response = await fetch('https://formspree.io/f/mdkwpgrd', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        setSubmitted(true);
        toast({
          title: 'Report Submitted',
          description: 'Thank you for reporting this security vulnerability. We will review it promptly.',
        });
        form.reset();
      } else {
        throw new Error('Failed to submit report');
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: 'Failed to submit report. Please try again or email us directly at ranveerminhas@proton.me',
        variant: 'destructive',
      });
    }
  };

  return (
    <div className="min-h-screen bg-background relative overflow-hidden flex flex-col page-fade-in">
      <GeometricBackground />
      
      <div className="relative z-10 flex-1">
        <header className="py-8 px-4 border-b border-border">
          <div className="max-w-4xl mx-auto">
            <Link href="/">
              <Button variant="ghost" className="gap-2 mb-4" data-testid="button-back">
                <ChevronLeft className="w-4 h-4" />
                Back to Home
              </Button>
            </Link>
            <div className="mb-2">
              <h1 className="text-4xl font-bold">Report a Vulnerability</h1>
            </div>
            <p className="text-muted-foreground mt-2">
              Help us keep VoidLock secure by reporting security issues responsibly
            </p>
          </div>
        </header>

        <main className="px-4 py-12">
          <div className="max-w-4xl mx-auto space-y-8">
            <section className="bg-card border-2 border-card-border rounded-2xl p-8">
              <h2 className="text-2xl font-bold mb-4">Responsible Disclosure</h2>
              <p className="text-muted-foreground mb-4">
                We take security seriously and appreciate the efforts of security researchers and users who help us maintain a secure platform. If you've discovered a security vulnerability in VoidLock, please report it to us responsibly.
              </p>
            </section>

            <section className="bg-destructive/10 border-2 border-destructive/30 rounded-2xl p-8">
              <div className="flex items-start gap-3 mb-4">
                <AlertTriangle className="w-6 h-6 text-destructive flex-shrink-0 mt-1" />
                <div>
                  <h2 className="text-2xl font-bold mb-2">Important Guidelines</h2>
                  <ul className="list-disc list-inside space-y-2 text-muted-foreground">
                    <li>Do not publicly disclose the vulnerability until we've had time to address it</li>
                    <li>Do not exploit the vulnerability beyond what's necessary to demonstrate it</li>
                    <li>Do not access, modify, or delete user data</li>
                    <li>Provide detailed information to help us reproduce and fix the issue</li>
                  </ul>
                </div>
              </div>
            </section>

            {submitted && (
              <section className="bg-primary/10 border-2 border-primary/30 rounded-2xl p-8">
                <h3 className="text-xl font-bold mb-2 text-primary">Thank You!</h3>
                <p className="text-muted-foreground">
                  Your vulnerability report has been submitted. Our security team will review it and get back to you as soon as possible.
                </p>
              </section>
            )}

            <section className="bg-card border-2 border-card-border rounded-2xl p-6 md:p-8">
              <h2 className="text-2xl font-bold mb-6">Submit a Vulnerability Report</h2>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  <div className="grid md:grid-cols-2 gap-4 md:gap-6">
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Your Name</FormLabel>
                          <FormControl>
                            <Input 
                              placeholder="John Doe" 
                              {...field} 
                              data-testid="input-name"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email Address</FormLabel>
                          <FormControl>
                            <Input 
                              type="email"
                              placeholder="john@example.com" 
                              {...field} 
                              data-testid="input-email"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <FormField
                    control={form.control}
                    name="severity"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Severity Level</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger data-testid="select-severity">
                              <SelectValue placeholder="Select severity level" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="low">Low - Minor issue with limited impact</SelectItem>
                            <SelectItem value="medium">Medium - Moderate security concern</SelectItem>
                            <SelectItem value="high">High - Significant security risk</SelectItem>
                            <SelectItem value="critical">Critical - Severe security vulnerability</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="title"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Vulnerability Title</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="Brief description of the vulnerability" 
                            {...field} 
                            data-testid="input-title"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Detailed Description</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Provide a detailed description of the vulnerability..."
                            className="min-h-32"
                            {...field} 
                            data-testid="textarea-description"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="stepsToReproduce"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Steps to Reproduce</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="1. Go to...&#10;2. Click on...&#10;3. Observe..."
                            className="min-h-32"
                            {...field} 
                            data-testid="textarea-steps"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name="impact"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Potential Impact</FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="Describe what an attacker could achieve by exploiting this vulnerability..."
                            className="min-h-24"
                            {...field} 
                            data-testid="textarea-impact"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div className="flex flex-col sm:flex-row gap-4 pt-4">
                    <Button 
                      type="submit" 
                      size="lg"
                      className="w-full sm:w-auto"
                      data-testid="button-submit"
                    >
                      Submit Report
                    </Button>
                    <Button 
                      type="button" 
                      variant="outline" 
                      size="lg"
                      className="w-full sm:w-auto"
                      onClick={() => form.reset()}
                      data-testid="button-reset"
                    >
                      Reset Form
                    </Button>
                  </div>
                </form>
              </Form>
            </section>

            <section className="bg-card border-2 border-card-border rounded-2xl p-8">
              <h2 className="text-2xl font-bold mb-4">What Happens Next?</h2>
              <ol className="list-decimal list-inside space-y-3 text-muted-foreground">
                <li className="pl-2">
                  <strong className="text-foreground">Acknowledgment:</strong> We'll acknowledge receipt of your report within 48 hours
                </li>
                <li className="pl-2">
                  <strong className="text-foreground">Investigation:</strong> Our team will investigate and validate the vulnerability
                </li>
                <li className="pl-2">
                  <strong className="text-foreground">Resolution:</strong> We'll work on fixing the issue and keep you updated
                </li>
                <li className="pl-2">
                  <strong className="text-foreground">Disclosure:</strong> Once fixed, we'll coordinate with you on public disclosure
                </li>
              </ol>
            </section>

            <div className="text-center pt-4">
              <Link href="/">
                <Button size="lg" className="gap-2" data-testid="button-back-bottom">
                  <ChevronLeft className="w-4 h-4" />
                  Back to Home
                </Button>
              </Link>
            </div>
          </div>
        </main>
      </div>

      <Footer />
    </div>
  );
}
